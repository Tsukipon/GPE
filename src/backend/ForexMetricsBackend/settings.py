"""
Django settings for ForexMetricsBackend project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import os
from pathlib import Path
import sys
import json
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ['DEBUG'].strip().upper() == 'TRUE' else False

#ALLOWED_HOSTS = ['*'] if not DEBUG else []
ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True

TOKEN_EXPIRE_TIME = datetime.timedelta(
    days=int(os.environ["TOKEN_EXPIRATION_DAYS"])
)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'register',
    'alert',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'register.authentication.ExpiringTokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ForexMetricsBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ForexMetricsBackend.wsgi.application'

# If this is used then `CORS_ALLOWED_ORIGINS` will not have any effect
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ['DB_ENGINE'],
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    },
    'test': {
        'ENGINE': os.environ['DB_ENGINE'],
        'NAME': os.environ['DB_TEST_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    },
    'localhost': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'gpe',
        'USER': 'root',
        'PASSWORD': 'alpha',
        'HOST': 'localhost',
        'PORT': '3306', }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'register.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/images/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'static', 'images')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATE_INPUT_FORMATS = "%Y-%m-%d %H:%M:%S"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
FIXTURE_DIRS = ["src/backend/fixtures"]

TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    "formatters": {
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter"
        },
        'verbose': {
            'format': json.dumps('"levelname": "{levelname}", "process": "{process:d}", "thread": "{thread:d}", "message": "{message}"'),
            'style': '{',
        },
    },
    'handlers': {
        'file_register_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/register_info.log',
            "formatter": "json"
        },
        'file_register_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/register_error.log',
            "formatter": "json"
        },
        'file_alerts_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/alerts_info.log',
            "formatter": "json"
        },
        'file_alerts_error': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/alerts_error.log',
            "formatter": "json"
        },
    },
    'loggers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'django_register_info': {
            'handlers': ['file_register_info'],
            'propagate': True,
            'level': 'INFO',
        },
        'django_register_error': {
            'handlers': ['file_register_error'],
            'propagate': True,
            'level': 'ERROR',
        },
        'django_alerts_info': {
            'handlers': ['file_alerts_info'],
            'propagate': True,
            'level': 'INFO',
        },
        'django_alerts_error': {
            'handlers': ['file_alerts_error'],
            'propagate': True,
            'level': 'ERROR',
        },
    },
}
